{"shell":true,"revision":"f6b89359e3128d9ab9a6f736703c8409a1d08f9a","objects":[{"type":null,"source":"lib/issues.ex:1","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Issues","id":"Issues"},{"type":null,"source":"lib/issues/cli.ex:5","object_type":"ModuleObject","moduledoc":"Handle the command line parsing and the dispatch to the various functions that\nend up generating a table of the last _n_ issues in a github project\n","module":"Elixir.Issues.CLI","id":"Issues.CLI"},{"type":null,"source":"lib/issues/github_issues.ex:1","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Issues.GithubIssues","id":"Issues.GithubIssues"},{"type":null,"source":"lib/issues/table_formatter.ex:1","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Issues.TableFormatter","id":"Issues.TableFormatter"},{"type":"def","source":"lib/issues/cli.ex:60","signature":[["list",[],null]],"object_type":"FunctionObject","name":"convert_to_list_of_maps","module_id":"Issues.CLI","id":"convert_to_list_of_maps/1","doc":null,"arity":1},{"type":"def","source":"lib/issues/cli.ex:52","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"decode_response","module_id":"Issues.CLI","id":"decode_response/1","doc":null,"arity":1},{"type":"def","source":"lib/issues/cli.ex:12","signature":[["argv",[],null]],"object_type":"FunctionObject","name":"main","module_id":"Issues.CLI","id":"main/1","doc":null,"arity":1},{"type":"def","source":"lib/issues/cli.ex:17","signature":[["argv",[],null]],"object_type":"FunctionObject","name":"parse_args","module_id":"Issues.CLI","id":"parse_args/1","doc":"`argv` can be -h or --help, which returns :help.\n\nOtherwise it is a github user name, project name, and (optionally) the number\nof entries to format.\n\nReturn a tuple of `{ user, project, count }`, or `:help` if help was given.\n","arity":1},{"type":"def","source":"lib/issues/cli.ex:36","signature":[["arg1",[],"Elixir"]],"object_type":"FunctionObject","name":"process","module_id":"Issues.CLI","id":"process/1","doc":null,"arity":1},{"type":"def","source":"lib/issues/cli.ex:65","signature":[["list_of_issues",[],null]],"object_type":"FunctionObject","name":"sort_into_ascending_order","module_id":"Issues.CLI","id":"sort_into_ascending_order/1","doc":null,"arity":1},{"type":"def","source":"lib/issues/github_issues.ex:7","signature":[["user",[],null],["project",[],null]],"object_type":"FunctionObject","name":"fetch","module_id":"Issues.GithubIssues","id":"fetch/2","doc":null,"arity":2},{"type":"def","source":"lib/issues/github_issues.ex:18","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"handle_response","module_id":"Issues.GithubIssues","id":"handle_response/1","doc":null,"arity":1},{"type":"def","source":"lib/issues/github_issues.ex:14","signature":[["user",[],null],["project",[],null]],"object_type":"FunctionObject","name":"issues_url","module_id":"Issues.GithubIssues","id":"issues_url/2","doc":null,"arity":2},{"type":"def","source":"lib/issues/table_formatter.ex:72","signature":[["column_widths",[],null]],"object_type":"FunctionObject","name":"format_for","module_id":"Issues.TableFormatter","id":"format_for/1","doc":"Return a format string that hard codes the widths of a set of columns. We put\n `\" | \"` between each column.\n\n## Example\n\n    iex> widths = [ 5, 6, 99 ]\n    iex> Issues.TableFormatter.format_for(widths)\n    \"~-5s | ~-6s | ~-99s~n\"\n\n","arity":1},{"type":"def","source":"lib/issues/table_formatter.ex:5","signature":[["rows",[],null],["headers",[],null]],"object_type":"FunctionObject","name":"print_table_for_columns","module_id":"Issues.TableFormatter","id":"print_table_for_columns/2","doc":"Takes a list of row data, where each row is a Map, and a list of headers.\nPrints a table to STDOUT of the data from each row identified by each header.\nThat is, each header identifies a column, and those columns are extracted and\nprinted from the rows.0\n\nWe calculate the width of each colunn to fit the longest element in that column.\n","arity":2},{"type":"def","source":"lib/issues/table_formatter.ex:43","signature":[["str",[],null]],"object_type":"FunctionObject","name":"printable","module_id":"Issues.TableFormatter","id":"printable/1","doc":"Return a binary (string) version of our parameter.\n\n## Examples\n\n    iex> Issues.TableFormatter.printable(\"a\")\n    \"a\"\n    iex> Issues.TableFormatter.printable(99)\n    \"99\"\n\n","arity":1},{"type":"def","source":"lib/issues/table_formatter.ex:102","signature":[["data_by_columns",[],null],["format",[],null]],"object_type":"FunctionObject","name":"puts_in_columns","module_id":"Issues.TableFormatter","id":"puts_in_columns/2","doc":"Given a list containing rows of data, a list containing the header selectors,\nand a format string, write the extracted data under control of the format string.\n","arity":2},{"type":"def","source":"lib/issues/table_formatter.ex:113","signature":[["fields",[],null],["format",[],null]],"object_type":"FunctionObject","name":"puts_one_line_in_columns","module_id":"Issues.TableFormatter","id":"puts_one_line_in_columns/2","doc":null,"arity":2},{"type":"def","source":"lib/issues/table_formatter.ex:87","signature":[["column_widths",[],null]],"object_type":"FunctionObject","name":"separator","module_id":"Issues.TableFormatter","id":"separator/1","doc":"Generate the line that goes below the column headings. It is a string of\nhyphens, with + signs where the vertical bar between the columns goes.\n\n## Example\n\n    iex> widths = [ 5, 6, 9 ]\n    iex> Issues.TableFormatter.separator(widths)\n    \"------+--------+----------\"\n\n","arity":1},{"type":"def","source":"lib/issues/table_formatter.ex:24","signature":[["rows",[],null],["headers",[],null]],"object_type":"FunctionObject","name":"split_into_columns","module_id":"Issues.TableFormatter","id":"split_into_columns/2","doc":"Given a list of rows, where each row contains a keyed list of columns, return\na list containing lists of the data in each column. The `headers` parameter\ncontains the list of columns to extract.\n\n## Example\n\n    iex> list = [Enum.into([{\"a\", \"1\"}, {\"b\", \"2\"}, {\"c\", \"3\"}], %{}),\n    ...>         Enum.into([{\"a\", \"4\"}, {\"b\", \"5\"}, {\"c\", \"6\"}], %{})]\n    iex> Issues.TableFormatter.split_into_columns(list, [ \"a\", \"b\", \"c\" ])\n    [ [ \"1\", \"4\" ], [ \"2\", \"5\" ], [ \"3\", \"6\" ] ]\n\n","arity":2},{"type":"def","source":"lib/issues/table_formatter.ex:57","signature":[["columns",[],null]],"object_type":"FunctionObject","name":"widths_of","module_id":"Issues.TableFormatter","id":"widths_of/1","doc":"Given a list containing sublists, where each sublist contains the data for a\ncolumn, return a list containing the maxiumn width of each colunn.\n\n## Example\n\n    iex> data = [ [ \"cat\", \"wombat\", \"elk\" ], [ \"mongoose\", \"ant\", \"gnu\" ] ]\n    iex> Issues.TableFormatter.widths_of(data)\n    [ 6, 8 ]\n\n","arity":1}],"language":"elixir","git_repo_url":"https://github.com/jasonpilz/issues.git","client_version":"0.5.5","client_name":"inch_ex","branch_name":"master","args":[]}